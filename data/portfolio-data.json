[
  {
    "id": 1,
    "title": "hotelrez",
    "description": "This application allows users to easily search for hotels, make reservations, and view facility rules. It was developed as a graduation project for the Siliconmade Academy Mobile Frontend training program.",
    "features": [
      "Search for hotels and view detailed information.",
      "Hotel search based on dates, number of people, and number of rooms.",
      "View hotel details.",
      "Personalized favorite hotels and reservation management pages for the user.",
      "User-friendly and stylish design."
    ],
    "screens": [
      "assets/screenshots/hotel-rez/1.jpg",
      "assets/screenshots/hotel-rez/2.jpg",
      "assets/screenshots/hotel-rez/3.jpg",
      "assets/screenshots/hotel-rez/4.jpg",
      "assets/screenshots/hotel-rez/5.jpg",
      "assets/screenshots/hotel-rez/6.jpg",
      "assets/screenshots/hotel-rez/7.jpg",
      "assets/screenshots/hotel-rez/8.jpg",
      "assets/screenshots/hotel-rez/9.jpg",
      "assets/screenshots/hotel-rez/10.jpg",
      "assets/screenshots/hotel-rez/11.jpg",
      "assets/screenshots/hotel-rez/12.jpg",
      "assets/screenshots/hotel-rez/13.jpg",
      "assets/screenshots/hotel-rez/14.jpg",
      "assets/screenshots/hotel-rez/15.jpg",
      "assets/screenshots/hotel-rez/16.jpg",
      "assets/screenshots/hotel-rez/17.jpg",
      "assets/screenshots/hotel-rez/18.jpg",
      "assets/screenshots/hotel-rez/19.jpg",
      "assets/screenshots/hotel-rez/20.jpg",
      "assets/screenshots/hotel-rez/21.jpg",
      "assets/screenshots/hotel-rez/22.jpg",
      "assets/screenshots/hotel-rez/23.jpg",
      "assets/screenshots/hotel-rez/1.jpg"
    ],
    "screenTexts": [
      "The application's home screen is the Hotels screen, which greets the user when the application is launched.",
      "On the homepage, there is a search box along with cards for recommended hotels and city cards. Users can search for hotels based on city, date, and number of guests.",
      "When clicked on any input area on Search Box, a modal is activated.",
      "The 'Your Destination' input field activates a modal where autocomplete is enabled. As text is entered, hotels and cities starting with the entered letters are filtered.",
      "When the check-in and check-out dates are clicked, a modal for date selection opens, allowing both dates to be selected via DateTimePicker.",
      "This modal allows users to select rooms, guests, and enable the pet-friendly option. Selections are confirmed by clicking the Apply button.",
      "Another modal allows selecting the number of rooms and guests. The chosen details are added to the search criteria by clicking the Apply button.",
      "Each time the number of rooms increases, a new field is added to select the number of guests for each room.",
      "This screen shows the list of hotels matching the selected city and date range, displaying each hotel’s name, price, rating, and image. Users can add hotels to favorites using the heart icon.",
      "Clicking on the header opens a modal similar to the search bar on the homepage, where search criteria can be adjusted.",
      "This screen displays detailed information about the selected hotel. Users can view the hotel’s name, rating, price, and images. The hotel’s facilities, rules, and location are also displayed.",
      "After reviewing all the information, users can proceed to room selection.",
      "This screen shows the rooms in the selected hotel, including photos, maximum occupancy, and total price.",
      "Users can start the reservation process by clicking the 'Make Reservation' button. Each room is displayed as a detailed card.",
      "This screen allows users to view the reservation summary for the selected room. The total price of the reservation, hotel rules, and other details are displayed.",
      "Upon clicking the Reserve button, the reservation is added to the user's reservations and stored in the database.",
      "This screen allows users to view the hotels they have added to their favorites. If the user is not logged in, they are prompted to log in.",
      " If the user is logged in, the list of favorite hotels is shown with details.",
      "On this screen, users can view the hotel reservations they have made. However if the user is not logged in, a message prompting them to log in is displayed.",
      "Reservations are listed with hotel name, price, and location information. Users can easily access hotel details.",
      "Login Screen: Allows users to log in using their email address and password. There is also an option to log in with Google.",
      "Register Screen: Enables new users to register in the system by providing email, password, and password confirmation fields.",
      "Upon login, users can access profile settings, notification preferences, payment methods, and other customization options. However, these features are not yet activated.",
      "Upon login, the application automatically redirects the user to the home screen."
    ],
    "technologies": {
      "frontend": "React Native (Expo)",
      "stateManagement": "Zustand",
      "backend": "Firebase (Authentication and Firestore)",
      "navigation": "React Navigation"
    }
  },
  {
    "id": 2,
    "title": "KonserX",
    "description": "KonserX is a React Native application that allows users to explore concerts in Turkey, follow their favorite artists' concerts, and find new events based on their interests. The app is still in development, and new features will be added in future releases.",
    "features": [
      "Spotify Login: Log in with your Spotify account and get recommendations based on your favorite artists.",
      "Personalized Recommendations: Get recommendations based on your Spotify music data and preferences.",
      "Popular and Upcoming Concerts: A list of popular artists and upcoming concerts.",
      "Filtering: Search and filter concerts by city, genre, and date.",
      "User Location Information: Get recommendations based on your location.",
      "Multi Authentication: Log in using either email or Spotify.",
      "Navigation: User-friendly bottom tab and stack navigation.",
      "Favorite Genre Selection: A screen to select favorite music genres for users who don't log in with Spotify."
    ],
    "screens": [
      "assets/screenshots/konserx/login.jpg",
      "assets/screenshots/konserx/home1.jpg",
      "assets/screenshots/konserx/home2.jpg",
      "assets/screenshots/konserx/explore1.jpg",
      "assets/screenshots/konserx/explore2.jpg",
      "assets/screenshots/konserx/explore3.jpg",
      "assets/screenshots/konserx/details.jpg"
    ],
    "screenTexts": [
      "Login screen where users can authenticate via Spotify or email. Spotify login automatically fetches the user's name and email.",
      "Home screen displaying personalized concert recommendations based on the user's Spotify data, including popular and upcoming concerts.",
      "The Home screen continues with additional concert categories, offering users the ability to explore new events based on their preferences.",
      "Explore page where users can filter concerts by city, genre, and date, dynamically fetching results from the backend.",
      "Detailed filter options for refining concert searches, including city and genre preferences, allowing for a more tailored experience.",
      "Concert list filtered based on user input, showing event details such as artist, location, and date.",
      "Concert detail page displaying full event information, including ticket purchase options and artist details."
    ],
    "technologies": {
      "Frontend": "React Native (Expo)",
      "State Management": "Zustand",
      "Backend": "Node.js and Express for handling API requests and Azure SQL Database for storing concert and artist data.",
      "Authentication": "Multi-authentication using Spotify and email, with JWT token for secure user sessions.",
      "Navigation": "React Navigation using both bottom tab and stack navigation."
    }
  },
  {
    "id": 3,
    "title": "MF101 Shop",
    "description": "Welcome to MF101 Shop, an e-commerce application developed as an assignment for the Siliconmade Academy Course. This app demonstrates core features of an online shopping experience, including product browsing, category filtering, and cart management.",
    "features": [
      "Login Functionality: Built using Formik for form handling and Yup for validation.",
      "Product List: Displays products with details like images, prices, and descriptions.",
      "Category Filtering: Lists products by selected categories.",
      "Shopping Cart: Add and view items in the cart.",
      "Navigation: Bottom tab navigation for seamless user experience."
    ],
    "screens": [
      "assets/screenshots/mf101Shop/1.jpg",
      "assets/screenshots/mf101Shop/2.jpg",
      "assets/screenshots/mf101Shop/3.jpg",
      "assets/screenshots/mf101Shop/4.jpg",
      "assets/screenshots/mf101Shop/5.jpg",
      "assets/screenshots/mf101Shop/6.jpg",
      "assets/screenshots/mf101Shop/7.jpg",
      "assets/screenshots/mf101Shop/8.jpg"
    ],
    "screenTexts": [
      "Login screen where users can log in using their email and password. Successful login redirects to the bottom tab navigation, and an error message is shown on failure.",
      "Product List screen accessible from the bottom tab. It displays a list of products fetched from the API, each with essential details.",
      "Categories screen accessible from the bottom tab. It lists product categories, and clicking on a category filters and displays related products.",
      "Product Details screen shows detailed information about a selected product, including an 'Add to Cart' button.",
      "Product Details screen continues with more product images and descriptions, providing complete information about the item.",
      "The final part of the Product Details screen, showing additional details and options for users to explore.",
      "Cart screen where users can view all products added to the cart, remove items, and check the total price of the cart contents.",
      "Cart screen continues with a view of all items in the cart, displaying individual product details and total pricing."
    ],
    "technologies": {
      "Frontend": "React Native",
      "Forms and Validation": "Formik for form handling, and Yup for validation.",
      "State Management": "Zustand",
      "Navigation": "React Navigation for implementing bottom tab navigation.",
      "Styling": "Custom CSS with dynamic theming for UI."
    }
  },
  {
    "id": 4,
    "title": "Pet Adopt App",
    "description": "Pet Adopt App is a React Native application built using Expo that allows users to browse, add, and adopt pets. The app offers authentication with Clerk, chat messaging, a favorites feature, and seamless navigation using Expo Router. It integrates Firebase Firestore for database management and storage.",
    "features": [
      "User Authentication: Users can sign up, log in, and authenticate using Clerk.",
      "Tab Navigation: Smooth navigation between Home, Favorites, Inbox, Profile sections.",
      "Pet Management: Add, view, and manage pets in the system.",
      "Favorites: Users can mark their favorite pets.",
      "Chat Messaging: Real-time chat between users for pet adoption inquiries.",
      "Profile Management: Manage user profile and posts."
    ],
    "screens": [
      "assets/screenshots/pet-adoption/01GetStartedScreen.jpg",
      "assets/screenshots/pet-adoption/02AuthWithGmail.jpg",
      "assets/screenshots/pet-adoption/03HomeScreen.jpg",
      "assets/screenshots/pet-adoption/04HomeScreenBirds.jpg",
      "assets/screenshots/pet-adoption/05HomeScreenCats.jpg",
      "assets/screenshots/pet-adoption/06PetInfoScreen.jpg",
      "assets/screenshots/pet-adoption/07PetInfoFavedScreen.jpg",
      "assets/screenshots/pet-adoption/08FavoritePetsScreen.jpg",
      "assets/screenshots/pet-adoption/09AddPetScreen.jpg",
      "assets/screenshots/pet-adoption/10AddPetScreenInputs.jpg",
      "assets/screenshots/pet-adoption/11InboxScreen.jpg",
      "assets/screenshots/pet-adoption/12ChatScreen.jpg",
      "assets/screenshots/pet-adoption/13ProfileScreen.jpg",
      "assets/screenshots/pet-adoption/14UserPets-Delete.jpg"
    ],
    "screenTexts": [
      "Get Started screen where users are introduced to the app and can proceed to authentication.",
      "Authentication screen allowing users to log in with their Gmail account through Clerk.",
      "Home screen where users can browse all available pets for adoption.",
      "Home screen filtered to display birds available for adoption.",
      "Home screen filtered to display cats available for adoption.",
      "Pet Info screen displaying detailed information about the selected pet.",
      "Pet Info screen with a 'Favorite' button to mark pets as favorites.",
      "Favorite Pets screen displaying all pets that have been marked as favorites by the user.",
      "Add Pet screen where users can add new pets for adoption, entering relevant information.",
      "Add Pet screen with input fields for adding pet details, including name, type, and other attributes.",
      "Inbox screen where users can view incoming messages and chat with pet owners.",
      "Chat screen where users can engage in real-time chat for pet adoption inquiries.",
      "Profile screen allowing users to manage their account details and posted pets.",
      "User Pets screen where users can delete pets they have listed for adoption."
    ],
    "technologies": {
      "Frontend": "React Native",
      "Backend": "Firebase Firestore for managing data and storage.",
      "Authentication": "Clerk for user authentication.",
      "Navigation": "React Native Expo Router",
      "State Management": "Zustand",
      "Chat Messaging": "react-native-gifted-chat.",
      "Styling": "Custom CSS with dynamic theming for UI."
    }
  },
  {
    "id": 5,
    "title": "Simple Order Management System",
    "description": "This application is designed to help company employees manage customer information and product orders with different user roles and permissions. The system uses a role-based access control mechanism with features such as user management, product and order management, and stock management.",
    "features": [
      "Login Page: Secure login page requiring credentials for access.",
      "Role-based Access: Different roles (Admin, User, Customer Representative) with specific permissions to manage products, customers, and orders.",
      "Product Management: Admins can manage product listings, including adding new products, updating existing ones, and removing products.",
      "Customer Management: Admins and Customer Representatives can manage customer details including full name, email, and phone number.",
      "Order Management: Customer Representatives can create and manage orders, update statuses, and track products.",
      "Stock Management: Admins can update product stock, confirm availability, and adjust stock levels.",
      "User Management: Admins can manage user roles, reset passwords, and modify user details.",
      "System Logs: Track and view logs related to user actions and system activities."
    ],
    "screens": [
      "assets/screenshots/order-management/login.png",
      "assets/screenshots/order-management/productcolor.png",
      "assets/screenshots/order-management/productmanagement.png",
      "assets/screenshots/order-management/productfilter.png",
      "assets/screenshots/order-management/productadd.png",
      "assets/screenshots/order-management/productupdate.png",
      "assets/screenshots/order-management/orderlist.png",
      "assets/screenshots/order-management/orderadd.png",
      "assets/screenshots/order-management/orderupdate.png",
      "assets/screenshots/order-management/customerlist.png",
      "assets/screenshots/order-management/customerupdate.png",
      "assets/screenshots/order-management/stocklist.png",
      "assets/screenshots/order-management/stockconfirm.png",
      "assets/screenshots/order-management/stockadd.png",
      "assets/screenshots/order-management/userlist.png",
      "assets/screenshots/order-management/changepassword.png",
      "assets/screenshots/order-management/rolepermissions.png",
      "assets/screenshots/order-management/groupclaims.png"
    ],
    "screenTexts": [
      "Login page where system users can enter credentials to access the platform.",
      "Product color management form where admins can add or update product color options for each product.",
      "Product management interface where admins can manage product details, such as size and available colors.",
      "Product filter screen that allows filtering by category, size, and color to easily navigate through products.",
      "Form to add new products, including selecting product name, size, color, and other essential details.",
      "Product Update Form where admins can modify product details, including selecting the product name, size, and color options.",
      "Order list view where admins and customer representatives can manage and track orders, update their statuses, and delete orders.",
      "Add order form where customer representatives can create new orders, assigning products, sizes, colors, and quantities to customers.",
      "Product update form to modify product details, including size and color options.",
      "Customer list where admins and customer representatives can manage customer information, including full name, email, and address.",
      "Customer update form where admins can modify customer details, such as contact information and addresses.",
      "Stock list where admins can manage product stock, including checking stock availability and adjusting quantities.",
      "Stock confirmation alert box allowing admins to confirm stock availability for products.",
      "Stock add form where admins can add new stock for products, including product name, size, color, and quantity.",
      "User management screen where admins can view and manage system users, reset passwords, and assign roles.",
      "Change password form where admins can update their login credentials.",
      "Role permissions management screen where admins can assign and modify user permissions for each role (Admin, User, Customer Representative).",
      "Group claims screen where admins can manage permissions associated with specific user groups, granting access to different system functionalities."
    ],
    "technologies": {
      "Frontend": "Angular for UI development and Bootstrap for responsive layout.",
      "Backend": ".NET Core for building the multi-layered backend architecture.",
      "Database": "MS SQL for data storage and Entity Framework Core for database interactions.",
      "Authentication": "Role-based access control using JWT for secure login sessions.",
      "Navigation": "Angular Router for efficient navigation across different pages of the application."
    }
  },
  {
    "id": 6,
    "title": "Warehouse Management System",
    "description": "This project is designed to practice Firestore and Firebase Authentication by developing a simple warehouse management system. Users can register and log in with Firebase, and manage the warehouse inventory with CRUD operations. A dynamic and user-friendly application is built using React, Redux, Firestore, and Tailwind CSS technologies.",
    "features": [
      "User registration and login with Firebase Authentication.",
      "Add, update, delete, and list products in the inventory using Firestore.",
      "Page navigation with React Router.",
      "Styling with Tailwind CSS."
    ],
    "screens": [
      "assets/screenshots/warehouse/login.jpg",
      "assets/screenshots/warehouse/register.jpg",
      "assets/screenshots/warehouse/homescreen.jpg",
      "assets/screenshots/warehouse/homescreenadd.jpg",
      "assets/screenshots/warehouse/homescreenupdate.jpg",
      "assets/screenshots/warehouse/rejectstock.jpg"
    ],
    "screenTexts": [
      "The screen where users can register and log in using Firebase Authentication.",
      "The screen where users can register to the system.",
      "The main screen displaying existing products in the warehouse.",
      "The screen used to add a new product to the inventory.",
      "The screen used to update an existing product.",
      "The screen where stock rejection operations are performed."
    ],
    "technologies": {
      "frontend": "React (with TypeScript)",
      "stateManagement": "Redux",
      "backend": "Firestore (for warehouse data and inventory management)",
      "authentication": "Firebase Authentication",
      "routing": "React Router",
      "styling": "Tailwind CSS"
    }
  },
  {
    "id": 7,
    "title": "Employee Leave Management System",
    "description": "This application allows users to manage employee leave requests with ASP.NET Core, Entity Framework, and the Repository Pattern. The system includes authentication, database interactions, and a user-friendly interface.",
    "features": [
      "Build a fully data-driven .NET Core MVC application from scratch.",
      "Implement authentication and authorization functionality using Identity Core.",
      "Manage employee leave requests with CRUD operations.",
      "Use AutoMapper and View Models for better data management.",
      "Implement the Repository and Unit of Work Patterns with Dependency Injection."
    ],
    "screens": [
      "assets/screenshots/employee-leave/login.jpg",
      "assets/screenshots/employee-leave/register.jpg",
      "assets/screenshots/employee-leave/resetpassword.jpg",
      "assets/screenshots/employee-leave/admin-create-leave-type.jpg",
      "assets/screenshots/employee-leave/admin-leave-types.jpg",
      "assets/screenshots/employee-leave/admin-employees.jpg",
      "assets/screenshots/employee-leave/admin-leave-allocations.jpg",
      "assets/screenshots/employee-leave/admin-leave-requests.jpg",
      "assets/screenshots/employee-leave/admin-leave-request-details.jpg",
      "assets/screenshots/employee-leave/admin-leave-request-details-approved.jpg",
      "assets/screenshots/employee-leave/user-apply-for-leave.jpg",
      "assets/screenshots/employee-leave/user-apply-for-leave2.jpg",
      "assets/screenshots/employee-leave/user-my-leave.jpg",
      "assets/screenshots/employee-leave/user-profile.jpg",
      "assets/screenshots/employee-leave/user-change-password.jpg"
    ],
    "screenTexts": [
      "Login screen allowing secure user authentication using Identity Core.",
      "Registration screen allowing new users to create accounts with validation.",
      "Password reset screen for users to request password recovery.",
      "Admin screen for creating new leave types to manage employee leave policies.",
      "Admin screen displaying all leave types with options to edit or delete.",
      "Admin screen listing all employees with the ability to manage their roles and details.",
      "Admin screen showing leave allocations for specific employees, allowing updates or deletions.",
      "Admin screen displaying all leave requests with their statuses and management options.",
      "Admin screen showing detailed information about a specific leave request.",
      "Admin screen showing approved leave request details for tracking and management.",
      "Screen for employees to apply for leave by selecting dates and leave types.",
      "Another screen where employees can refine leave request details before submission.",
      "Screen displaying a summary of all leave requests submitted by the employee.",
      "Profile management screen where users can update their personal details.",
      "Screen for users to change their account password securely."
    ],
    "technologies": {
      "frontend": "ASP.NET Core MVC with Bootstrap and jQuery",
      "stateManagement": "Dependency Injection with Repository and Unit of Work Patterns",
      "backend": "Entity Framework Core with SQL Server",
      "authentication": "ASP.NET Core Identity"
    }
  }
]
